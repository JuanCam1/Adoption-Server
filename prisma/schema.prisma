generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model State {
  id    Int    @id @default(autoincrement())
  state String @unique @default("Activo")
  user  User[] @relation("StateUser")
  pet   Pet[]  @relation("StatePet")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  phone       String
  address     String
  location    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  codeOTP     String?

  stateId Int
  state   State @relation("StateUser", fields: [stateId], references: [id])

  sessions Session[] @relation("SessionUsuario")
  role     Role      @default(USER_ROLE)

  pathPicture     String
  filenamePicture String

  Pet                  Pet[]             @relation("UserPet")
  Adoption             Adoption[]        @relation("AdoptionUser")
  Conversation         Conversation[]    @relation("StartedConversations")
  ReceivedConversation Conversation[]    @relation("ReceivedConversations")
  SentMessages         Message[]         @relation("SentMessages")
  ReceivedMessages     Message[]         @relation("ReceivedMessages")
  Post                 Post[]            @relation("UserPost")
  Comment              Comment[]         @relation("UserComment")
  AdoptionBy           AdoptionHistory[] @relation("AdoptionHistoryUser")
  AdoptionFrom         AdoptionHistory[] @relation("AdoptionSource")

  UserRated    UserRating[] @relation("UserRated")
  UserWhoRated UserRating[] @relation("UserWhoRated")

  @@index([name])
}

model Pet {
  id          String    @id @default(uuid())
  name        String
  genderId    Int
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  breed       String
  statePet    StatePet  @default(AVAILABLE)
  location    String
  latitude    Float
  longitude   Float
  typeId      Int
  delete      Boolean   @default(false)
  Post        Post[]    @relation("PostPet")
  type        TypePet   @relation("TypePet", fields: [typeId], references: [id])
  age         String
  gender      GenderPet @relation("GenderPet", fields: [genderId], references: [id])
  userId      String
  User        User?     @relation("UserPet", fields: [userId], references: [id])

  Adoption   Adoption[]        @relation("AdoptionPet")
  AdoptionBy AdoptionHistory[] @relation("AdoptionHistoryPet")

  stateId Int
  state   State @relation("StatePet", fields: [stateId], references: [id])

  pathPicture     String
  filenamePicture String
}

model TypePet {
  id   Int    @id @default(autoincrement())
  type String @unique
  pet  Pet[]  @relation("TypePet")
}

model GenderPet {
  id     Int    @id @default(autoincrement())
  gender String @unique
  pet    Pet[]  @relation("GenderPet")
}

model Adoption {
  id        Int           @id @default(autoincrement())
  petId     String
  pet       Pet           @relation("AdoptionPet", fields: [petId], references: [id])
  userId    String
  user      User          @relation("AdoptionUser", fields: [userId], references: [id])
  estado    StateAdoption @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Conversation {
  id        Int       @id @default(autoincrement())
  user1     User      @relation("StartedConversations", fields: [user1Id], references: [id])
  user1Id   String
  user2     User      @relation("ReceivedConversations", fields: [user2Id], references: [id])
  user2Id   String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([user1Id, user2Id])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
}

model Post {
  id          String        @id @default(uuid())
  title       String
  content     String
  author      User          @relation("UserPost", fields: [authorId], references: [id])
  authorId    String
  pet         Pet           @relation("PostPet", fields: [petId], references: [id])
  petId       String
  comments    Comment[]     @relation("PostComment")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  picturePost PicturePost[] @relation("PicturePost-Post")
}

model Picture {
  id              String        @id @default(uuid())
  pathPicture     String
  filenamePicture String
  picturePost     PicturePost[] @relation("PicturePost-Picture")
}

model PicturePost {
  id        String  @id @default(uuid())
  postId    String
  post      Post    @relation("PicturePost-Post", fields: [postId], references: [id])
  pictureId String
  picture   Picture @relation("PicturePost-Picture", fields: [pictureId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation("UserComment", fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation("PostComment", fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model AdoptionHistory {
  id           Int      @id @default(autoincrement())
  petId        String
  pet          Pet      @relation("AdoptionHistoryPet", fields: [petId], references: [id])
  adoptedBy    User     @relation("AdoptionHistoryUser", fields: [userId], references: [id])
  userId       String
  adoptedFrom  User     @relation("AdoptionSource", fields: [sourceUserId], references: [id])
  sourceUserId String
  adoptedAt    DateTime @default(now())
}

model Session {
  id           String @id @default(cuid())
  token        String @db.Text
  type         String
  date_created String
  time_created String
  userId       String
  user         User   @relation("SessionUsuario", fields: [userId], references: [id])
}

model UserRating {
  id          Int      @id @default(autoincrement())
  ratedUser   User     @relation("UserRated", fields: [ratedUserId], references: [id])
  ratedUserId String
  ratedBy     User     @relation("UserWhoRated", fields: [ratedById], references: [id])
  ratedById   String
  score       Int
  comment     String?
  createdAt   DateTime @default(now())

  @@unique([ratedUserId, ratedById])
}

enum Role {
  USER_ROLE
  ADMIN_ROLE
}

enum StateAdoption {
  PENDING
  APPROVED
  REJECTED
}

enum StatePet {
  AVAILABLE
  ADOPTED
  IN_PROCESS
}

model Setting {
  id          Int    @id @default(autoincrement())
  version     String
  name_app    String
  description String
}
